--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   01:06:10 10/22/2020
-- Design Name:   
-- Module Name:   /home/ise/UART/test.vhd
-- Project Name:  UART
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: TXUART
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY test IS
END test;
 
ARCHITECTURE behavior OF test IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT TXUART
    PORT(
         Transmit : IN  std_logic;
         Load : IN  std_logic;
         Data : IN  std_logic_vector(7 downto 0);
         Tx : OUT  std_logic;
         clk : IN  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal Transmit : std_logic := '0';
   signal Load : std_logic := '0';
   signal Data : std_logic_vector(7 downto 0) := (others => '0');
   signal clk : std_logic := '0';

 	--Outputs
   signal Tx : std_logic;

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: TXUART PORT MAP (
          Transmit => Transmit,
          Load => Load,
          Data => Data,
          Tx => Tx,
          clk => clk
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      wait for 100 ns;	

      wait for clk_period*10;

      -- insert stimulus here 
		Data(0) <= '1';
		Data(1) <= '0';
		Data(2) <= '0';
		Data(3) <= '1';
		Data(4) <= '1';
		Data(5) <= '0';
		Data(6) <= '0';
		Data(7) <= '0';
		Load <= '0', '1' after 60 ns, '0' after 600 ns;
		wait for 100 ns;
		Transmit <= '0', '1' after 60 ns, '0' after 600 ns;

      wait;
   end process;

END;

